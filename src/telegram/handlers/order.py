from loguru import logger
from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from loguru import logger

from src.database.uow import UnitOfWork
from src.telegram.keyboards import inline
from src.telegram.states import CheckoutStates
from src.telegram.utils import generate_order_number
from src.services import OrderService, CartService, UserService

router = Router()


@router.message(Command("checkout"))
async def start_checkout(message: Message, state: FSMContext, uow: UnitOfWork):
    user_service = UserService(uow)
    user = await user_service.get_user_by_telegram(message.from_user.id)

    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return

    if not user.name or not user.phone or not user.address:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –í–≤–µ–¥–∏—Ç–µ –∏–º—è:")
        await state.set_state(CheckoutStates.name)
    else:
        await message.answer(
            "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –º–æ–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É",
            reply_markup=inline.delivery_panel_kb,
        )

        await state.set_state(CheckoutStates.delivery)


@router.message(CheckoutStates.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567):")
    await state.set_state(CheckoutStates.phone)


@router.message(CheckoutStates.phone)
async def process_phone(message: Message, state: FSMContext):
    phone = message.text
    if not phone.startswith("+") or len(phone) < 10:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(phone=phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(CheckoutStates.address)


@router.message(CheckoutStates.address)
async def process_address(message: Message, state: FSMContext):
    await state.update_data(address=message.text)

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=inline.delivery_panel_kb
    )
    await state.set_state(CheckoutStates.delivery)


@router.callback_query(F.data.startswith("delivery"), CheckoutStates.delivery)
async def process_delivery(callback: CallbackQuery, state: FSMContext, uow: UnitOfWork):
    user_service = UserService(uow)
    cart_service = CartService(uow)

    delivery_type = callback.data.split(":")[1]
    order_number = generate_order_number()

    user = await user_service.get_user_by_telegram(callback.from_user.id)
    cart = await cart_service.get_cart(
        callback.from_user.id
    )  # –±–µ—Ä—ë–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if not cart or not cart.items:
        await callback.message.answer(
            "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞! –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞."
        )
        return

    # —Å—Ç—Ä–æ–∏–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
    items_text = ""
    total = 0
    for item in cart.items:
        items_text += f"{item.product.name} ‚Äî {item.quantity} —à—Ç. ‚Äî {item.price_at_add * item.quantity} ‚ÇΩ\n"
        total += item.price_at_add * item.quantity

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not user.name or not user.phone or not user.address:
        user_name = data.get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        user_phone = data.get("phone", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        user_address = data.get("address", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    else:
        user_name = user.name
        user_phone = user.phone
        user_address = user.address

    text = (
        f"‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑:\n"
        f"–ò–º—è: {user_name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_phone}\n"
        f"–ê–¥—Ä–µ—Å: {user_address}\n"
        f"–î–æ—Å—Ç–∞–≤–∫–∞: {delivery_type}\n\n"
        f"–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:\n{items_text}\n"
        f"–ò—Ç–æ–≥–æ: {total} ‚ÇΩ"
    )

    await state.update_data(delivery=delivery_type, order_number=order_number)
    await callback.message.answer(text, reply_markup=inline.confirm_panel_kb)
    await state.set_state(CheckoutStates.confirmation)


@router.callback_query(F.data == "confirm", CheckoutStates.confirmation)
async def confirm_order(callback: CallbackQuery, state: FSMContext, uow: UnitOfWork):
    data = await state.get_data()
    service = OrderService(uow)
    order = await service.create_order(
        order_number=data["order_number"],
        user_id=callback.from_user.id,
        delivery_method=data["delivery"],
    )

    await callback.message.answer(f"–í–∞—à –∑–∞–∫–∞–∑ #{order.order_number} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!")
    await state.clear()


@router.callback_query(F.data == "cancel", CheckoutStates.confirmation)
async def cancel_order(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.")
    await state.clear()


@router.callback_query(F.data.startswith("checkout"))
async def checkout(callback: CallbackQuery, uow: UnitOfWork, state: FSMContext):
    user_service = UserService(uow)
    cart_service = CartService(uow)

    user = await user_service.get_user_by_telegram(callback.from_user.id)
    cart = await cart_service.get_cart(user.telegram_id)
    if not user or not user.address:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–¥—Ä–µ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ.")
        await state.set_state(CheckoutStates.address)
        return

    if not cart or not cart.items:
        await callback.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏", reply_markup=inline.delivery_panel_kb
    )
    await state.set_state(CheckoutStates.delivery)


@router.callback_query(F.data.startswith("delivery"), CheckoutStates.delivery)
async def chosen_delivery(callback: CallbackQuery, uow: UnitOfWork, state: FSMContext):
    user_service = UserService(uow)
    order_service = OrderService(uow)
    user = await user_service.get_user_by_telegram(callback.from_user.id)

    order = await order_service.create_order(
        order_number=generate_order_number(),
        user_id=user.telegram_id,
        delivery_method=callback.data.split(":")[1],
    )
    await callback.message.answer(f"‚úÖ –ó–∞–∫–∞–∑ ‚Ññ{order.order_number} –æ—Ñ–æ—Ä–º–ª–µ–Ω!")
